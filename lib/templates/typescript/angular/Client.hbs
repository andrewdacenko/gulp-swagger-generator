export class {{clientName}}  {
    private baseUri: string;
    private hostName: string;
    private scheme: string;

    /* @ngInject */
    constructor(
        {{#options.inject}}
        private {{name}}: {{type}},
        {{/options.inject}}
        private $http: angular.IHttpService
    ) {
        this.hostName = '{{#options.host.override}}{{.}}{{/options.host.override}}{{#unless options.host.override}}{{api.host}}{{/unless}}';
        {{#options.host.set}}
        if ({{.}}) {
            this.hostName = {{.}};
        }
        {{/options.host.set}}
        this.scheme = '{{#options.scheme}}{{.}}{{/options.scheme}}{{#unless options.scheme}}'http'{{/unless}}';
        this.baseUri = this.scheme + '://' + this.hostName {{#api.basePath}}+ '{{.}}'{{/api.basePath}};
    }

{{#api.operations}}
    /**
    * {{description}}
    {{#args}}
    * @param { {{> Type}} } {{camlCase name}} {{description}}
    {{/args}}
    * @return { {{> Type successsResponse}} } {{successResponse.title}}
    */
    {{lowerCase verb}}{{#pathSegments}}{{#isParam}}By{{/isParam}}{{pascalCase name}}{{/pathSegments}}(
    {{#args}}
        {{camlCase name}}{{#if optional}}?{{/if}}: {{> Type}},
    {{/args}}
        canceller?: angular.IDeferred<any>
    ) : angular.IHttpPromise<{{> Type successResponse}}> {

        var uri = this.baseUri + {{#pathSegments}}{{#isParam}}{{#unless @first}}' + {{/unless}}String({{name}}){{#unless @last}} + '{{/unless}}{{/isParam}}{{#unless isParam}}{{#if @first}}'{{/if}}{{name}}{{#unless @last}}/{{/unless}}{{#if @last}}'{{/if}}{{/unless}}{{/pathSegments}};

        var httpRequestParams: any = {
            method: '{{verb}}',
            url: uri,
            {{#isJsonResponse}}
            json: true,
            {{/isJsonResponse}}
            {{#requestBody}}
            data: {{camlCase name}},
            {{/requestBody}}
            params: {
            {{#query}}
                '{{name}}': {{camlCase name}}{{#unless @last}},{{/unless}}
            {{/query}}
            },
            headers: {
            {{#headers}}
                '{{name}}': {{camlCase name}}{{#unless @last}},{{/unless}}
            {{/headers}}
            }
        };

    {{#isFormDataRequest}}
        var formData = new FormData();
    {{#formData}}
        {{#getType this}}
        {{#if isFile}}
        formData.append('{{../name}}', new Blob([ {{camlCase ../name }} ], {type: 'application/octet-stream'}));
        {{/if}}
        {{#unless isFile}}
        formData.append('{{../name}}', {{camlCase ../name}});
        {{/unless}}
        {{/getType}}
    {{/formData}}
        httpRequestParams.data = formData;
        httpRequestParams.transformRequest = data => data;
        httpRequestParams.headers['Content-Type'] = undefined;
    {{/isFormDataRequest}}

        if (canceller){
            httpRequestParams.timeout = canceller.promise;
        }

    {{#mapLookup @root.options.security security}}
        {{#configure}}
        httpRequestParams = this.{{.}}(httpRequestParams);
        {{/configure}}
    {{/mapLookup}}

        return this.$http(httpRequestParams);
    }

{{/api.operations}}
}