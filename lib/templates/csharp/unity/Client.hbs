public class {{clientName}}{{#if options.generateInterface}}: I{{clientName}}{{/if}} {
    private string baseUri;
    private string hostName;
    private string scheme;
    private JsonSerializerSettings settings;
    public static readonly UnitySynchronizationContext context;

{{#options.inject}}
    private {{type}} {{name}};
{{/options.inject}}

static {{clientName}}() {
    context = new UnitySynchronizationContext ();
    System.Threading.SynchronizationContext.SetSynchronizationContext (context);
}

public {{clientName}}(
{{#options.inject}}
    {{type}} {{name}}{{#unless @last}},{{/unless}}
{{/options.inject}}
) {
{{#options.inject}}
    this.{{name}} = {{name}};
{{/options.inject}}
    this.hostName = "{{#options.host.override}}{{.}}{{/options.host.override}}{{#unless options.host.override}}{{api.host}}{{/unless}}";
{{#options.host.set}}
    if (!string.IsNullOrEmpty({{.}})) {
    this.hostName = {{.}};
    }
{{/options.host.set}}
    this.scheme = "{{#options.scheme}}{{.}}{{/options.scheme}}{{#unless options.scheme}}'http'{{/unless}}";
    this.baseUri = string.Concat(this.scheme, "://", this.hostName {{#api.basePath}}, "{{.}}"{{/api.basePath}});
    this.settings = new JsonSerializerSettings();
    this.settings.DateFormatHandling = DateFormatHandling.IsoDateFormat;
}

{{#api.operations}}
    /**
    * {{description}}
    {{#args}}
        * @param { {{> Type}} } {{camlCase name}} {{description}}
    {{/args}}
    * @return { {{> Type successsResponse}} } {{successResponse.title}}
    */
    public void {{pascalCaseOverwriteCasing verb}}{{#pathSegments}}{{#isParam}}By{{/isParam}}{{pascalCase name}}{{/pathSegments}}(
        Action<{{> Type successResponse}}> callback{{#if args}},{{/if}}
    {{#args}}
        {{> Type}} {{camlCase name}}{{#if optional}} = default({{> Type}}){{/if}}{{#unless @last}},{{/unless}}
    {{/args}}
        ) {

        var uri = this.baseUri + {{#pathSegments}}{{#isParam}}{{#if @first}}"/" + {{/if}}{{#unless @first}}" + {{/unless}}{{name}}.ToString(){{#unless @last}} + "{{/unless}}{{/isParam}}{{#unless isParam}}{{#if @first}}"/{{/if}}{{name}}{{#unless @last}}/{{/unless}}{{#if @last}}"{{/if}}{{/unless}}{{/pathSegments}};

    {{#if query}}
        uri = AddQueryString(uri, new Dictionary<string, object>() {
        {{#query}}
            ["{{name}}"] = {{camlCase name}}{{#unless @last}},{{/unless}}
        {{/query}}
        });
    {{/if}}


        System.Net.HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create (uri);
        req.Method = "{{verb}}";

    {{#isJsonResponse}}
        req.Accept = "application/json";
    {{/isJsonResponse}}
    {{#isJsonRequest}}
    {{#requestBody}}
        req.ContentType = "application/json";
    {{/requestBody}}
    {{/isJsonRequest}}


    {{#headers}}
        req.Headers["{{name}}"] = SafeToString({{camlCase name}});
    {{/headers}}

    {{#isFormDataRequest}}

    {{/isFormDataRequest}}

    {{#mapLookup @root.options.security security}}
        {{#configure}}
        this.{{.}}(req);
        {{/configure}}
    {{/mapLookup}}

    {{#if requestBody}}
        req.BeginGetRequestStream ((System.IAsyncResult state) => {
            var result = req.EndGetRequestStream(state);
            using (var writer = new StreamWriter(result, System.Text.Encoding.UTF8)){
                writer.Write(JsonConvert.SerializeObject({{camlCase requestBody.name}}));
            }
            result.Close();
    {{/if}}
            req.BeginGetResponse ((System.IAsyncResult responseState) => {
                var response = req.EndGetResponse(responseState);

                using (var streamReader = new StreamReader(response.GetResponseStream())){
                    try{
                        context.Post((res)=>callback(({{> Type successResponse}})res), JsonConvert.DeserializeObject<{{> Type successResponse}}>(streamReader.ReadToEnd(), this.settings));
                    }
                    catch(System.Exception ex){
                        Debug.LogError(ex);
                    }
                }
            }, null);
    {{#if requestBody}}
        }, null);
    {{/if}}
    }

{{/api.operations}}

        private static string SafeToString(object value) {
            if (value == null)
                return null;
            return value.ToString();
        }

    /// <summary>
    /// Append the given query keys and values to the uri.
    /// </summary>
    /// <param name="uri">The base uri.</param>
    /// <param name="queryString">A collection of name value query pairs to append.</param>
    /// <returns>The combined result.</returns>
    public static string AddQueryString(
        string uri,
        IEnumerable<KeyValuePair<string, object>> queryString)
    {
        var anchorIndex = uri.IndexOf('#');
        var uriToBeAppended = uri;
        var anchorText = "";
        // If there is an anchor, then the query string must be inserted before its first occurance.
        if (anchorIndex != -1)
        {
            anchorText = uri.Substring(anchorIndex);
            uriToBeAppended = uri.Substring(0, anchorIndex);
        }

        var queryIndex = uriToBeAppended.IndexOf('?');
        var hasQuery = queryIndex != -1;

        var sb = new StringBuilder();
        sb.Append(uriToBeAppended);
        foreach (var parameter in queryString)
        {
            if (parameter.Value == null)
                continue;
            sb.Append(hasQuery ? '&' : '?');
            sb.Append(WWW.EscapeURL(parameter.Key));
            sb.Append('=');
            sb.Append(WWW.EscapeURL(parameter.Value.ToString()));
            hasQuery = true;
        }

        sb.Append(anchorText);
        return sb.ToString();
    }

public class PendingOperation {

System.Threading.SendOrPostCallback Callback { get; set;}
object State { get; set;}
System.Threading.EventWaitHandle Handle { get; set;}

public PendingOperation(System.Threading.SendOrPostCallback callback, object state, System.Threading.EventWaitHandle handle){
this.Callback = callback;
this.State = state;
this.Handle = handle;
}

public void Invoke(){
Callback(State);
if (Handle != null){
Handle.Set();
}
}
}


public class UnitySynchronizationContext: System.Threading.SynchronizationContext
{
System.Collections.Generic.Queue<PendingOperation> pendingOperations = new System.Collections.Generic.Queue<PendingOperation>();
    private bool hasWork = false;

    public UnitySynchronizationContext ()
    {
    }

    public override void Send (System.Threading.SendOrPostCallback d, object state)
    {
    System.Threading.ManualResetEvent rse = new System.Threading.ManualResetEvent (false);
    lock (pendingOperations) {
    this.pendingOperations.Enqueue(new PendingOperation(d, state, rse));
    hasWork = true;
    }
    rse.WaitOne();
    rse.Close();
    }

    public override void Post (System.Threading.SendOrPostCallback d, object state)
    {
    lock (pendingOperations) {
    this.pendingOperations.Enqueue(new PendingOperation(d, state, null));
    hasWork = true;
    }
    }


    public void Process(){
    PendingOperation operation = null;
    bool hasWork = true;
    while (hasWork) {
    lock (pendingOperations) {
    if (pendingOperations.Count > 0) {
    operation = pendingOperations.Dequeue ();
    } else {
    hasWork = false;
    }
    }
    if (operation == null) {
    return;
    } else {
    operation.Invoke();
    operation = null;
    }
    }
    }
    }
}